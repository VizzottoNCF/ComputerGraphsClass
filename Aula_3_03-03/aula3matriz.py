# -*- coding: utf-8 -*-
"""Aula2Matriz

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ekXtK28AFnUbM9CHEswK9yeQzeC1hI2

Exercício 1: Operação com Matrizes (Produto de Duas Matrizes)
"""

import numpy as np

mtx_a = np.array([
    [2, 7, 3],
    [1, 5, 4]
])

mtx_b = np.array([
    [5, 2],
    [2, 7],
    [3, 1]
])

# gets shape of matrices
lines_A, col_A = mtx_a.shape  # (2x3)
lines_B, col_B = mtx_b.shape  # (3x2)

if lines_A != col_B:
  print("\nError: Size is not compatible")
else:
    # initialize matrix C with value = 0
    mtx_c = np.zeros((lines_A, col_B))

    # matrix multiplication
    for i in range(lines_A):
        for j in range(col_B):
            for k in range(col_A):
                mtx_c[i][j] += mtx_a[i][k] * mtx_b[k][j]

    # display matrix
    print("Matrix C:")
    for row in mtx_c:
        print('[', end='')
        for element in row:
            print(f' {element:1}', end=' ')
        print(']')

"""Exercício 2: Matriz Diagonal

Exercício 3: Matriz Identidade
"""

import numpy as np

mtx_a = np.array([
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 2]
])

# gets shape of matrices
lines_A, col_A = mtx_a.shape  # (3x3)

if range(lines_A) != range(col_A):
  print('Not a square matrix, invalid input')
else:
  isDiagonal = True
  isIdentity = True
  for i in range(lines_A):
    for j in range(col_A):
      if i != j and mtx_a[i][j] != 0:
        print(f'Matrix is not diagonal, refer to: {mtx_a[i],[j]}')
        isDiagonal = False
        isIdentity = False
      if i == j and mtx_a[i][j] != 1:
        print(f'Matrix is not identity, refer to: {mtx_a[i],[j]}')
        isIdentity = False


if isDiagonal:
  print('Matrix e diagonal')
else:
  print('Matrix nao e diagonal')

if isIdentity:
  print('Matrix e identidade')
else:
  print('Matrix nao e identidade')

"""Exercício 4: Operação com Matrizes (Matriz Transposta)"""

import numpy as np

mtx_a = np.array([
    [ 1,  2,  3],
    [ 4,  5,  6],
    [ 7,  8,  9],
    [10, 11, 12]
])
# gets shape of matrices
lines_A, col_A = mtx_a.shape  # (4x3)

# display matrix
print("Matrix A:")
for row in mtx_a:
  print('[', end='')
  for element in row:
    print(f' {element:1}', end=' ')
  print(']')

# outer loop iterates over the columns of the original matrix.
# inner loop iterates over the rows of the original matrix.
# matrix[j][i] accesses the element at row j and column i of the original matrix and places it at row i and column j in the transposed matrix.
mtx_transp = [[mtx_a[j][i] for j in range(lines_A)] for i in range(col_A)]

# display matrix
print("Transposed Matrix:")
for row in mtx_transp:
  print('[', end='')
  for element in row:
    print(f' {element:1}', end=' ')
  print(']')

"""Exercício 5: Operações com Matrizes (Múltiplos Escalares)"""

import numpy as np

scalar = 3
print('Scalar: ', scalar)
mtx_a = np.array([
    [ 1,  2,  3],
    [ 4,  5,  6],
    [ 7,  8,  9],
    [10, 11, 12]
])

# gets shape of matrices
lines_A, col_A = mtx_a.shape  # (4x3)

mtx_a_b = np.zeros((lines_A, col_A))

# display matrix
print("Matrix A:")
for row in mtx_a:
  print('[', end='')
  for element in row:
    print(f' {element:1}', end=' ')
  print(']')

for i in range(lines_A):
    for j in range(col_A):
      mtx_a_b[i][j] = mtx_a[i][j] * scalar

# display matrix
print("Matrix A * Scalar:")
for row in mtx_a_b:
  print('[', end='')
  for element in row:
    print(f' {element:1}', end=' ')
  print(']')