# -*- coding: utf-8 -*-
"""Aula1.jpynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s4LoI0RjL1UV8VbD6Pp4i_oC_NxU0G1j

Como fiz sozinho:
"""

import numpy as np
import matplotlib.pyplot as plt

# Create figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Draw central X and Y axes in black
ax.axhline(0, color='black', linewidth=1)  # X-axis
ax.axvline(0, color='black', linewidth=1)  # Y-axis

# Set axis limits
ax.set_xlim(-6, 6)
ax.set_ylim(-6, 6)

# Draw Lines
ax.plot([1, 5], [1, 2], color='blue', linewidth=2, linestyle='-', label='A')
ax.plot([-1, -4], [-1, 3], color='green', linewidth=2, linestyle='-', label='B')

# Legenda
ax.legend()

# Show Grid
plt.show()

"""Como o professor fez:"""

import matplotlib.pyplot as plt
import numpy as np

# Set points
a_origin = np.array([4,1])
a_end = np.array([2,3])
b_origin = np.array([-3,-1])
b_end = np.array([-5,4])

# Create Graph
fig, ax = plt.subplots()
ax.axhline(0, color='black', linewidth=0.5)
ax.axvline(0, color='black', linewidth=0.5)

ax.set_xlim(-10,10)
ax.set_ylim(-10,10)
ax.set_xlabel('Eixo X')
ax.set_ylabel('Eixo Y')
ax.set_title('Vectors')

# PARAMS:
# O m√©todo quiver desenha os vetores no gr√°fico:
# - O primeiro e segundo par√¢metros representam a origem do vetor (coordenadas iniciais no plano cartesiano).
# - O terceiro e quarto par√¢metros representam o deslocamento (o comprimento e a dire√ß√£o da flecha do vetor).
# - angles='xy' mant√©m a orienta√ß√£o dos vetores corretamente.
# - scale_units='xy' e scale=1 garantem que os vetores sejam exibidos sem reescalonamento autom√°tico.
# - color define a cor do vetor.
# - label atribui um nome ao vetor para aparecer na legenda.
ax.quiver(a_origin[0], a_origin[1], a_end[0], a_end[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Vetor a')
ax.quiver(b_origin[0], b_origin[1], b_end[0], b_end[1], angles='xy', scale_units='xy', scale=1, color='green', label='Vetor b')

# Legenda e mostrar o gr√°fico
ax.legend()
plt.show()

"""üîπ ax.plot() ‚Üí Draws Lines
Used to plot straight or curved lines by connecting points. Works well for paths, trends, and custom lines.

ax.plot([x_start, x_end], [y_start, y_end], color='blue', linewidth=2)


üîπ ax.quiver() ‚Üí Draws Vectors (Arrows)
Used to visualize vector fields, like velocity or force fields.
Instead of connecting points, it draws arrows showing direction & magnitude.
ax.quiver(X, Y, U, V, color='red')
X, Y ‚Üí The starting points of the arrows.
U, V ‚Üí The vector components (x and y directions).
color ‚Üí Defines arrow color.


Adi√ß√£o de Vetores.
Soma a magnitude e dire√ß√£o de um ou mais vetores e cria um terceiro vetor com a soma
"""

import matplotlib.pyplot as plt
import numpy as np

#a_or1 = float(input('A Origin X:'))
#a_or2 = float(input('A Origin Y:'))
#a_e1 = float(input('A End X:'))
#a_e2 = float(input('A End Y:'))
#b_or1 = float(input('B Origin X:'))
#b_or2 = float(input('B Origin Y:'))
#b_e1 = float(input('B End X:'))
#b_e2 = float(input('B End Y:'))
a_or1 = 0
a_or2 = 0
a_e1 = 2
a_e2 = 1
b_or1 = 2
b_or2 = 1
b_e1 = -1
b_e2 = 4

# Set points
a_origin = np.array([a_or1, a_or2])
a_end = np.array([a_e1, a_e2])
a_magnitude = np.array([(-a_origin[0] + a_end[0]), (-a_origin[1] + a_end[1])])

b_origin = np.array([b_or1, b_or2])
b_end = np.array([b_e1, b_e2])
b_magnitude = np.array([(-b_origin[0] + b_end[0]), (-b_origin[1] + b_end[1])])

# magnitude variable tells quiver function how much it needs to go in each direction

#c_origin = a_origin + b_origin
c_origin = a_origin

# Create Graph
fig, ax = plt.subplots()
ax.axhline(0, color='black', linewidth=0.5)
ax.axvline(0, color='black', linewidth=0.5)

ax.set_xlim(-10, 10)
ax.set_ylim(-10, 10)
ax.set_xlabel('Eixo X')
ax.set_ylabel('Eixo Y')
ax.set_title('Vectors')

# Draw A & B Vector
ax.quiver(a_origin[0], a_origin[1], a_magnitude[0], a_magnitude[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Vetor a')
ax.quiver(b_origin[0], b_origin[1], b_magnitude[0], b_magnitude[1], angles='xy', scale_units='xy', scale=1, color='green', label='Vetor b')

# Calculate the sum of vectors
c_magnitude = a_magnitude + b_magnitude

print('--------------------')
print('origin A ' + str(a_origin))
print('origin B ' + str(b_origin))
print('origin C ' + str(c_origin))
print('magnitude A ' + str(a_magnitude))
print('magnitude B ' + str(b_magnitude))
print('magnitude C ' + str(c_magnitude))

# Draw C Vector
ax.quiver(c_origin[0], c_origin[1], c_magnitude[0], c_magnitude[1], angles='xy', scale_units='xy', scale=1, color='yellow', label='Vetor c')

# Display graph
ax.legend()
plt.show()