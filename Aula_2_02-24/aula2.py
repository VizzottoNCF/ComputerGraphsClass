# -*- coding: utf-8 -*-
"""Aula2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hk26xy4JozzySFKhZkWkqSJRjex3WH4v

EXERCÍCIO 01:

Desenvolva um programa que leia pelo teclado os valores x, y e z de um vetor de 3 dimensões.
Em seguida, apresente ao usuário um menu com as seguintes opções:

a) Calcular o tamanho do vetor;

b) Normalizar o vetor, apresentando o vetor resultante da normalização;

c) Adicionar outro vetor ao que foi lido anteriormente, lendo os valores x, y e z deste novo vetor;

d) Subtrair outro vetor ao que foi lido anteriormente, lendo os valores x, y e z deste novo vetor;

e) Ler o valor de um escalar e realizar a multiplicação do mesmo pelo vetor, mostrando o vetor resultante;

f) Ler o valor de um escalar e realizar a divisão do mesmo pelo vetor, mostrando o vetor resultante;

g) Calcular o produto escalar do vetor lido anteriormente por outro vetor, lendo os valores x, y e z deste novo vetor e mostrando o resultado na tela.

OBS: Utilize as fórmulas que foram apresentadas nos slides para a realização dos exercícios. O envio (código) deve ser realizado até o final da aula pela ferramenta ‘minha ufn’ na atividade que o professor deixou aberta. O professor irá passar por cada aluno pedindo explicações, se for usar ferramentas de IA, tenha consciência que não adianta copiar código e não saber explicar.
"""

import matplotlib.pyplot as plt
import numpy as np
import math

print('Monte um vetor com coordenadas de um plano tridimensional')
x = (int(input('valor X')))
y = (int(input('valor Y')))
z = (int(input('valor Z')))
print('-------------------------------')
print('Valores: ', x, y, z) #shows input

state = ''
isGoing = True

# the lenght of a vector is measured by the square root of the sum of each coordinate elevated by the power of 2
# ²Vx²+y²+z²
def rf_DefineSize(x, y, z):
    return math.sqrt(x**2 + y**2 + z**2)

# gathers the lenght of the vector and returns
def rf_NormalizeVector(x, y, z):
    size = rf_DefineSize(x, y, z)
    return x/size, y/size, z/size

# receives input of two separate coordinates and returns a new coordinate with the sum/result of their pairs
def rf_AddVector(x1, y1, z1, x2, y2, z2):
    return x1 + x2, y1 + y2, z1 + z2
def rf_SubtractVector(x1, y1, z1, x2, y2, z2):
    return x1 - x2, y1 - y2, z1 - z2

# receives input of a coordinate and scalar factor, returns a new coordinate multiplied/divided by the scalar factor
# [x,y,z] * scalar = [x*scalar, y*scalar, z*scalar]
# [x,y,z] / scalar = [x/scalar, y/scalar, z/scalar]
def rf_MultiplyVector(x, y, z, scalar):
    return x * scalar, y * scalar, z * scalar
def rf_DivideVector(x, y, z, scalar):
    return x / scalar, y / scalar, z / scalar

# receives two separate coordinates, multiplies their 'equals' and returns the sum of them
# A = [Ax, Ay, Az] | B = [Bx, By, Bz]
# A * B = Ax*Bx + Ay*By + Az*Bz
def rf_DotProduct(x1, y1, z1, x2, y2, z2):
    return x1*x2 + y1*y2 + z1*z2

while isGoing:
    print('-------------------------------')
    print('1. Tamanho do vetor')
    print('2. Normalizar o vetor')
    print('3. Adicionar outro vetor')
    print('4. Subtrair outro vetor')
    print('5. Multiplicar por escalar')
    print('6. Dividir por escalar')
    print('7. Produto escalar')
    print('8. Terminar')
    print('\n')

    state = input('Digite a Opção: ')

    # VECTOR LENGHT
    if state == '1':
        size = rf_DefineSize(x, y, z)
        print(f'Tamanho do vetor: {size}')

    # NORMALIZE VECTOR
    elif state == '2':
        normalized = rf_NormalizeVector(x, y, z)
        print(f'Vetor normalizado: {normalized}')

    # ADD VECTOR
    elif state == '3':
        print('valor X do primeiro vetor: ', x)
        print('valor Y do primeiro vetor: ', y)
        print('valor Z do primeiro vetor: ', z)
        x2 = int(input('valor X do segundo vetor: '))
        y2 = int(input('valor Y do segundo vetor: '))
        z2 = int(input('valor Z do segundo vetor: '))
        result = rf_AddVector(x, y, z, x2, y2, z2)
        print(f'Resultado da adição: {result}')

    # SUBTRACT VECTOR
    elif state == '4':
        print('valor X do primeiro vetor: ', x)
        print('valor Y do primeiro vetor: ', y)
        print('valor Z do primeiro vetor: ', z)
        x2 = int(input('valor X do segundo vetor: '))
        y2 = int(input('valor Y do segundo vetor: '))
        z2 = int(input('valor Z do segundo vetor: '))
        result = rf_SubtractVector(x, y, z, x2, y2, z2)
        print(f'Resultado da subtração: {result}')

    # MULTIPLY VECTOR
    elif state == '5':
        scalar = int(input('Digite o escalar: '))
        result = rf_MultiplyVector(x, y, z, scalar)
        print(f'Resultado da multiplicação: {result}')

    # DIVIDE VECTOR
    elif state == '6':
        scalar = int(input('Digite o escalar: '))
        result = rf_DivideVector(x, y, z, scalar)
        print(f'Resultado da divisão: {result}')

    # DOT PRODUCT OF VECTOR
    elif state == '7':
        print('valor X do primeiro vetor: ', x)
        print('valor Y do primeiro vetor: ', y)
        print('valor Z do primeiro vetor: ', z)
        x2 = int(input('valor X do segundo vetor: '))
        y2 = int(input('valor Y do segundo vetor: '))
        z2 = int(input('valor Z do segundo vetor: '))
        result = rf_DotProduct(x, y, z, x2, y2, z2)
        print(f'Produto escalar: {result}')

    elif state == '8':
        print('Encerrando processo')
        isGoing = False
    else:
        print('Opção inválida. Tente novamente.')