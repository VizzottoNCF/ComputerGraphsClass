# -*- coding: utf-8 -*-
"""Aula4Transformacoes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OLPHzZtzDpC4SymRik1Y8Zm9RdCs10XT

Exemplo de Código
"""

import numpy as np
import matplotlib.pyplot as plt
# Função para calcular a translação dos pontos
def translacao(pontos, Tx, Ty):
  pontos_transladados = []
  for ponto in pontos:
    x_u = ponto[0] + Tx
    y_u = ponto[1] + Ty
    pontos_transladados.append((x_u, y_u))
  return pontos_transladados

# Pontos originais
p1 = (0, 0)
p2 = (2, 2)

# Vetor de translação
Tx = 3
Ty = 2

# Calcular a translação dos pontos
pontos_transladados = translacao([p1, p2], Tx, Ty)

# Plotar os pontos originais e os pontos transladados
plt.plot([p1[0], p2[0]], [p1[1], p2[1]], 'bo-', label='Pontos originais')
plt.plot([ponto[0] for ponto in pontos_transladados], [ponto[1] for ponto in pontos_transladados], 'ro-', label='Pontos transladados')
#[ponto[0] for ponto in pontos_transladados]:
#Isso é uma compreensão de lista, uma construção Python que permite criar listas de maneira mais compacta.
#O que está entre os colchetes é uma expressão que define como cada elemento da lista será construído.
#ponto[0] é a expressão usada para cada elemento da lista. Aqui, 'ponto' representa cada elemento da lista 'pontos_transladados', que são as coordenadas dos pontos transladados.
#ponto[0] extrai o primeiro elemento de cada tupla dentro da lista pontos_transladados, que corresponde à coordenada x do ponto.
#Então, [ponto[0] for ponto in pontos_transladados] cria uma lista contendo apenas as coordenadas x dos pontos transladados. Essa lista é usada para definir os valores do eixo x no gráfico.
#'bo-' especifica o estilo do gráfico: b para azul (blue), 'o' para marcador de círculo e '-' para linha contínua.
#'ro-':#Isso define o estilo do gráfico para os pontos transladados. Aqui, 'r' indica que os pontos serão vermelhos,
# 'o' especifica que os marcadores serão círculos e '-' indica que uma linha contínua conectará os pontos.

# Configurações do gráfico
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Translação de pontos no plano cartesiano')
plt.grid(True)
plt.legend()

# Mostrar o gráfico
plt.show()

import numpy as np
import matplotlib.pyplot as plt
# Função para calcular a translação dos pontos
def translacao(pontos, Tx, Ty):
  pontos_transladados = []
  for ponto in pontos:
    x_u = ponto[0] + Tx
    y_u = ponto[1] + Ty
    pontos_transladados.append((x_u, y_u))
  return pontos_transladados

# Pontos originais
p1 = (6, 8)
p2 = (4, 5)
p3 = (8, 5)

# Vetor de translação
Tx = 3
Ty = -4

# Calcular a translação dos pontos
pontos_transladados = translacao([p1, p2, p3, p1], Tx, Ty)

# Plotar os pontos originais e os pontos transladados
plt.plot([p1[0], p2[0], p3[0], p1[0]], [p1[1], p2[1], p3[1], p1[1]], 'bo-', label='Pontos originais')
plt.plot([ponto[0] for ponto in pontos_transladados], [ponto[1] for ponto in pontos_transladados], 'ro-', label='Pontos transladados')

# Adicionar rótulos aos pontos originais
for i, p in enumerate([p1, p2, p3], start=1):
    plt.text(p[0], p[1], f' P{i}', fontsize=12, verticalalignment='bottom', horizontalalignment='right')  # Exibe rótulo dos pontos originais

# Adicionar rótulos aos pontos transladados
for i, p in enumerate(pontos_transladados, start=1):
    plt.text(p[0], p[1], f' P{i}`', fontsize=12, verticalalignment='bottom', horizontalalignment='right')  # Exibe rótulo dos pontos transladados

# Configurações do gráfico
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Translação de pontos no plano cartesiano')
plt.grid(True)
plt.legend()

# Mostrar o gráfico
plt.show()

import numpy as np
import matplotlib.pyplot as plt
# Função para calcular a translação dos pontos
def rf_scale(pontos, Tx, Ty):
  pontos_escalados = []
  for ponto in pontos:
    x_u = ponto[0] * Sx
    y_u = ponto[1] * Sy
    pontos_escalados.append((x_u, y_u))
  return pontos_escalados

# Pontos originais
p1 = (1, 1)
p2 = (1, -1)
p3 = (-1, -1)
p4 = (-1, 1)

# Vetor de escala
Sx = 2
Sy = 2

# Calcular a translação dos pontos
pontos_escalados = rf_scale([p1, p2, p3, p4, p1], Sx, Sy)

# Plotar os pontos originais e os pontos transladados
plt.plot([p1[0], p2[0], p3[0], p4[0], p1[0]], [p1[1], p2[1], p3[1], p4[1], p1[1]], 'bo-', label='Pontos originais')
plt.plot([ponto[0] for ponto in pontos_escalados], [ponto[1] for ponto in pontos_escalados], 'ro-', label='Pontos escalados')

# Adicionar rótulos aos pontos originais
for i, p in enumerate([p1, p2, p3, p4], start=1):
    plt.text(p[0], p[1], f' P{i}', fontsize=12, verticalalignment='bottom', horizontalalignment='right')  # Exibe rótulo dos pontos originais

# Adicionar rótulos aos pontos transladados
for i, p in enumerate(pontos_escalados, start=1):
    plt.text(p[0], p[1], f' P{i}`', fontsize=12, verticalalignment='bottom', horizontalalignment='right')  # Exibe rótulo dos pontos transladados

# Configurações do gráfico
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Translação de pontos no plano cartesiano')
plt.grid(True)
plt.legend()

# Mostrar o gráfico
plt.show()

import numpy as np
import matplotlib.pyplot as plt
# Função para calcular a translação dos pontos
def rf_rotate(pontos, angulo):
  angulo_rad = np.radians(angulo)
  pontos_rotados = []
  for ponto in pontos:
    x0, y0 = ponto
    x_u = round(x0 * np.cos(angulo_rad) - y0 * np.sin(angulo_rad), 2)
    y_u = round(x0 * np.sin(angulo_rad) + y0 * np.cos(angulo_rad), 2)
    pontos_rotados.append((x_u, y_u))
  return pontos_rotados

# Pontos originais
p1 = (1, 1)
p2 = (1, -1)
p3 = (-1, -1)
p4 = (-1, 1)

# Vetor de rotação
angulo = 45

# Calcular a translação dos pontos
pontos_rotados = rf_rotate([p1, p2, p3, p4, p1], angulo)

# Plotar os pontos originais e os pontos transladados
plt.plot([p1[0], p2[0], p3[0], p4[0], p1[0]], [p1[1], p2[1], p3[1], p4[1], p1[1]], 'bo-', label='Pontos originais')
plt.plot([ponto[0] for ponto in pontos_rotados], [ponto[1] for ponto in pontos_rotados], 'ro-', label='Pontos rotados')

# Adicionar rótulos aos pontos originais
for i, p in enumerate([p1, p2, p3, p4], start=1):
    plt.text(p[0], p[1], f' P{i}', fontsize=12, verticalalignment='bottom', horizontalalignment='right')  # Exibe rótulo dos pontos originais

# Adicionar rótulos aos pontos transladados
for i, p in enumerate(pontos_rotados, start=1):
    plt.text(p[0], p[1], f' P{i}`', fontsize=12, verticalalignment='bottom', horizontalalignment='right')  # Exibe rótulo dos pontos transladados

# Configurações do gráfico
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Translação de pontos no plano cartesiano')
plt.grid(True)
plt.legend()

# Mostrar o gráfico
plt.show()